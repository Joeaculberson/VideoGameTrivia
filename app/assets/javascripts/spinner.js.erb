/*
 Description:
 This script contains the functions to load the winning wheel image and do the rotation of it.
 By Douglas McKechie @ www.dougtesting.net
 */
var canvasId = "myDrawingCanvas";   // Id of the canvas element on the page the wheel is to be rendered on.
var wheelImageName = "question_spinner.png";	// File name of the image for the wheel.
var spinButtonImgOn = "spin_on.png";		// Name / path to the images for the spin button.
var spinButtonImgOff = "spin_off.png";
var theSpeed = 10; 		 // Controls how often the spin function is called (is miliseconds value for animation timer).
var pointerAngle = 0;  	 	 // The angle / location around the wheel where the pointer indicaing the prize is located. Can be any value you like, 0 is top (12 oclock) 180 is bottom (6 o'clock) etc.
var doPrizeDetection = true; 	 // Set to true if you want the code to detect the prize the user has won when the spinning has stopped. Prizes need to be specified in the prizes array.
var spinMode = "random"; // Values can be: random, determinedAngle, determinedPrize.
var determinedGetUrl = "";  	 // Set to URL of the server-side process to load via ajax when spinMode is determinedAngle or determinedPrize.

var prizes = new Array();
prizes[0] = {"name": "adventure", "startAngle": 0, "endAngle": 51.42857142857143};  // Note how prize end angle is 1 less than start angle of next prize so no overlap.
prizes[1] = {"name": "arcade", "startAngle": 51.42857142857144, "endAngle": 102.85714285714286};
prizes[2] = {"name": "fps", "startAngle": 102.85714285714286, "endAngle": 154.28571428571429};
prizes[3] = {"name": "racing", "startAngle": 154.2857142857143, "endAngle": 205.71428571428572};
prizes[4] = {"name": "role-playing", "startAngle": 205.71428571428573, "endAngle": 257.14285714285715};
prizes[5] = {"name": "challenge", "startAngle": 257.14285714285716, "endAngle": 308.57142857142858};
prizes[6] = {"name": "action", "startAngle": 308.57142857142859, "endAngle": 360};

// --------------------------------
// VARIABLES THAT YOU DON'T NEED TO / SHOULD NOT CHANGE...
var surface;		   // Set to the drawing canvas object in the begin function.
var wheel;			   // The image of the face of the wheel is loaded in to an image object assigned to this var.
var angle = 0;  // Populated with angle figured out by the threshold code in the spin function. You don't need to set this here.
var targetAngle = 0;  // Set before spinning of the wheel begins by startSpin function depending on spinMode.
var currentAngle = 0;  // Used during the spin to keep track of current angle.
var power = 0;  // Set when the power is selected. 1 for low, 2 for med, 3 for high.

var xhr = new XMLHttpRequest();
xhr.onreadystatechange = ajaxCallback;
var randomLastThreshold = 150;
var spinTimer;
var wheelState = 'reset';

function begin() {
    surface = document.getElementById(canvasId);
    if (surface.getContext) {
        wheel = new Image();
        wheel.onload = initialDraw;		// Once the image is loaded from file this function is called to draw the image in its starting position.
        wheel.src = wheelImageName;
    }
}

function initialDraw(e) {
    var surfaceContext = surface.getContext('2d');
    surfaceContext.drawImage(wheel, 0, 0);
}

function startSpin(determinedValue) {
    var audio = new Audio('<%= image_url('sounds/wheel_ding.wav') %>');
    audio.play();
    var stopAngle = undefined;
    if (spinMode == "random") {
        stopAngle = Math.floor(Math.random() * 360);
    }
    else if (spinMode == "determinedAngle") {
        if (typeof(determinedValue) === 'undefined') {
            if (determinedGetUrl) {
                xhr.open('GET', determinedGetUrl, true);
                xhr.send('');
            }
        }
        else {
            stopAngle = determinedValue;
        }
    }
    else if (spinMode == "determinedPrize") {
        if (typeof(determinedValue) === 'undefined') {
            if (determinedGetUrl) {
                xhr.open('GET', determinedGetUrl, true);
                xhr.send('');
            }
        }
        else {
            stopAngle = Math.floor(prizes[determinedValue]['startAngle'] + (Math.random() * (prizes[determinedValue]['endAngle'] - prizes[determinedValue]['startAngle'])));
        }
    }

    if ((typeof(stopAngle) !== 'undefined') && (wheelState == 'reset') && (power)) {
        stopAngle = (360 + pointerAngle) - stopAngle;
        targetAngle = (360 * (power * 6) + stopAngle);
        randomLastThreshold = Math.floor(90 + (Math.random() * 90));
        wheelState = 'spinning';
        doSpin();
    }
}

function ajaxCallback() {
    if (xhr.readyState < 4) {
        return;
    }

    if (xhr.status !== 200) {
        return;
    }
    startSpin(xhr.responseText);
}

function doSpin() {
    var surfaceContext = surface.getContext('2d');
    surfaceContext.save();
    surfaceContext.translate(wheel.width * 0.5, wheel.height * 0.5);
    surfaceContext.rotate(DegToRad(currentAngle));
    surfaceContext.translate(-wheel.width * 0.5, -wheel.height * 0.5);
    surfaceContext.drawImage(wheel, 0, 0);
    surfaceContext.restore();
    currentAngle += angle;
    if (currentAngle < targetAngle) {
        var angleRemaining = (targetAngle - currentAngle);
        if (angleRemaining > 6480)
            angle = 55;
        else if (angleRemaining > 5000)		// NOTE: you can adjust as desired to alter the slowdown, making the stopping more gradual or more sudden.
            angle = 45;						// If you alter the forumla used to work out the targetAngle you may need to alter these.
        else if (angleRemaining > 4000)
            angle = 30;
        else if (angleRemaining > 2500)
            angle = 25;
        else if (angleRemaining > 1800)
            angle = 15;
        else if (angleRemaining > 900)
            angle = 11.25;
        else if (angleRemaining > 400)
            angle = 7.5;
        else if (angleRemaining > 220)					// You might want to randomize the lower threhold numbers here to be between a range
            angle = 3.80;								// otherwise if always within last 150 when the speed is set to 1 degree the user can
        else if (angleRemaining > randomLastThreshold)	// tell what prize they will win before the wheel stops after playing the wheel a few times.
            angle = 1.90;								// This variable is set in the startSpin function. Up to you if you want to randomise the others.
        else
            angle = 1;		// Last angle should be 1 so no risk of the wheel overshooting target if using preDetermined spin mode
        // (only a problem if pre-Determined location is near edge of a segment).

        spinTimer = setTimeout("doSpin()", theSpeed);
    }
    else {
        wheelState = 'stopped';

        // If to do prize dection then work out the prize pointed to.
        if ((doPrizeDetection) && (prizes)) {
            // Get how many times the wheel has rotated past 360 degrees.
            var times360 = Math.floor(currentAngle / 360);
            var rawAngle = (currentAngle - (360 * times360));
            var relativeAngle = Math.floor(pointerAngle - rawAngle);

            if (relativeAngle < 0)
                relativeAngle = 360 - Math.abs(relativeAngle);

            for (x = 0; x < (prizes.length); x++) {
                if ((relativeAngle >= prizes[x]['startAngle']) && (relativeAngle <= prizes[x]['endAngle'])) {
                    //alert("You won " + prizes[x]['name'] + "!\nClick 'Play Again' to have another go.");
                    $.post('/spun_category', {spun_category: prizes[x]['name']});
                    break;
                }
            }
        }

        // ADD YOUR OWN CODE HERE.
        // If no prize detection then up to you to do whatever you want when the spinning has stopped.
    }
}

function DegToRad(d) {
    return d * 0.0174532925199432957;
}

function powerSelected(powerLevel) {
    if (wheelState == 'reset') {
        power = powerLevel;
    }
}
